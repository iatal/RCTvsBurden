setwd("Desktop/Programs GBD/RCTvsBurden/Interactive_figure/")

library(shiny)
library(gdata)
library(ggplot2)
library(grid)
library(gridExtra)

DT <- read.table("./data/data.txt")

input <- list(tabs="compare",all_nhi_comp = "All regions",
disease1 = "Neoplasms", disease2 = "HIV", metr_burden_comp_dis = "DALY", metr_res_comp_dis = "RCTs",hgb_comp_dis=TRUE)


#region="World",metr_burden="DALY",metr_res="RCTs",Nb_dis=10,
#all_nhi = "All regions",disease="All diseases",metr_burden2="DALY",metr_res2="RCTs",
#region1="High-income countries",region2="World",metr_burden_comp="DALY",metr_res_comp="RCTs",Nb_dis_comp=10,
#hgp_reg = TRUE,

DT$regs_lab <- reorder(DT$regs_lab,new.order=c("World",
                                               "High-income countries",
                                               "Non-high-income countries",
                                               "Eastern Europe and Central Asia",
                                               "Latin America and Caribbean",
                                               "North Africa and Middle East",
                                               "South Asia",
                                               "Southeast Asia, East Asia and Oceania",
                                               "Sub-Saharian Africa"))
                       
dinit_reg <- DT[DT$Disease!="All",-c(grep("glob",names(DT)),grep("NHI",names(DT)))]
dinit_dis <- droplevels(DT[DT$Region!="All" & DT$Region!="Non-HI",-grep("loc",names(DT))])
levels(dinit_dis$regs_lab) <- c("High-income",
                                "Eastern Europe\nCentral Asia",
                                "Latin America",
                                "North Africa\nMiddle East",
                                "South Asia",
                                "Southeast Asia\nOceania",
                                "Sub-Saharian\nAfrica")

#For numbers in tooltip
form_ratio <- function(x,pourc=TRUE){
    if(is.na(x[1])) return(NA)
        else {
        paste(format(round(x[2]),nsmall = 0,big.mark=","),
               ifelse(pourc==TRUE,"% ["," ["),format(round(x[1]),nsmall = 0,big.mark=","),
               " - ",format(round(x[3]),nsmall = 0,big.mark=","),"]",sep="")
            }
    }



    #subset according to Glob vs across NHI
    ddis_comp_reg <- 
        if(input$all_nhi_comp=="All regions") dinit_dis[,-grep("NHI",names(dinit_dis))]        
            else dinit_dis[dinit_dis$Region!="High-income",-grep("glob",names(dinit_dis))]
    
        
    #subset according to disease
    ddis_comp <- 
        ddis_comp_reg[ddis_comp_reg$Dis_tooltip%in%c(input$disease1,input$disease2),]
    

    #subset according to burden metric
        dfb <- ddis_comp[,c(which(names(ddis_comp)%in%c("Disease","Dis_lab","Dis_tooltip","Region","regs_lab")),
                                   grep(tolower(input$metr_burden_comp_dis),names(ddis_comp)))]
        names(dfb) <- c("Region","Disease","Dis_lab","Dis_tooltip","regs_lab","Nb","prop")
        dfb$metr <- "burden"
    ddis_comp_burden <- 
        dfb
   

    #Order of regions: depending on burden of the disease: increasing burden. if High-income: we put it first
        r <- as.character(ddis_comp_burden$Region[ddis_comp_burden$Dis_tooltip==input$disease1][order(ddis_comp_burden$Nb[ddis_comp_burden$Dis_tooltip==input$disease1])])
        if("High-income"%in%r) r <- c("High-income",r[r!="High-income"])
    regs_ord_comp <- 
        r
  

    #subset according to research metric
        dfr <- ddis_comp[,c(which(names(ddis_comp)%in%c("Disease","Dis_lab","Dis_tooltip","Region","regs_lab")),
                         grep(input$metr_res_comp_dis,names(ddis_comp)))]
        names(dfr) <- c("Region","Disease","Dis_lab","Dis_tooltip",
                        "regs_lab","Nb_low","Nb_med","Nb_up","prop_low","prop_med","prop_up")
    ddis_comp_res <- 
        dfr
  
    
    #data for plot
    
        dfr_med <- ddis_comp_res[,c("Region","regs_lab","Disease","Dis_lab","Dis_tooltip","Nb_med","prop_med")]
        names(dfr_med) <- c("Region","regs_lab","Disease","Dis_lab","Dis_tooltip","Nb","prop")
        dfr_med$metr <- "research"        
        dt <- rbind(ddis_comp_burden[,c("Region","regs_lab","Disease","Dis_lab","Dis_tooltip","Nb","prop","metr")],dfr_med)
        dt$Region <- reorder(dt$Region,new.order=regs_ord_comp)
    ddis_comp_plot <- 
        dt
        

    
    #data for error bars
    
        d_err <- ddis_comp_res[,c("Region","regs_lab","Disease","Dis_lab","Dis_tooltip","prop_low","prop_up")]
        d_err$metr <- "research"        
        d_err$Region <- reorder(d_err$Region,new.order=regs_ord_comp)
    ddis_comp_err <- 
        d_err
    
           
            
    #data for hover
    
        dpts <- merge(ddis_comp_burden,ddis_comp_res)
        dpts$Region <- reorder(dpts$Region,new.order=regs_ord_comp)
        dpts$Reg_pos <- as.numeric(dpts$Region)
        
        #burden points
        dpts_bur <- dpts
        dpts_bur$prop_pos <- dpts_bur$prop
        dpts_bur$Reg_pos <- dpts_bur$Reg_pos-0.2
        D_bur <- do.call('rbind',
        lapply(1:nrow(dpts_bur),function(x){
            tt <- trunc(dpts_bur$prop_pos[x])
            dtp <- dpts_bur[rep(x,tt+2),]
            dtp$prop_pos <- c(0:tt,dpts_bur$prop_pos[x])
            dtp
        }))
        
        D_bur$prop_pos[D_bur$Dis_tooltip==input$disease2] <- -D_bur$prop_pos[D_bur$Dis_tooltip==input$disease2]

        
        #research points
        dpts_res <- dpts[!is.na(dpts$prop_med),]
        dpts_res$prop_pos <- dpts_res$prop_med
        dpts_res$Reg_pos <- dpts_res$Reg_pos+0.2
        D_res <- do.call('rbind',
        lapply(1:nrow(dpts_res),function(x){
            tt <- trunc(dpts_res$prop_pos[x])
            dtp <- dpts_res[rep(x,tt+2),]
            dtp$prop_pos <- c(0:tt,dpts_res$prop_pos[x])
            dtp
        }))
        
        D_res$prop_pos[D_bur$Dis_tooltip==input$disease2] <- -D_res$prop_pos[D_bur$Dis_tooltip==input$disease2]
        
    ddis_comp_points <- 
        rbind(D_bur,D_res)
        

        
    
    #Hover info
    output$hover_info_dis1 <- renderUI({
        
        hover <- input$plot_hover_dis1
        
        point <- nearPoints(ddis_comp_points[ddis_comp_points$Dis_tooltip==input$disease1,],
        hover, yvar="prop_pos", xvar="Reg_pos",
                            threshold = (1005*0.2/(length(regs_ord_comp) + 0.4)), maxpoints = 1, addDist = TRUE)
        if (nrow(point) == 0) return(NULL)

            # create style property fot tooltip
            # background color is set so tooltip is a bit transparent
            # z-index is set so we are sure are tooltip will be on top
            style <- paste0("position:relative; z-index:100; background-color: rgba(245, 245, 245, 0.95); ",
                            "left:", 0, "px; top:", 0, "px;")

            tags$div(class = "well well-sm",
                     style = style,
                     p(HTML(paste0("<b> Group of diseases: </b>", input$disease1, "<br/>",
                                   "<b> Region: </b>", point$Region, "<br/>",
                                   "<b> Burden: </b>", format(round(point$Nb/1e6,1),nsmall = 1,big.mark=","),
                                   " million ", input$metr_burden_comp_dis,"s (",
                                   format(round(point$prop),nsmall = 0),"%)<br/>",
                                   "<b> Research: </b>", 
                                   ifelse(input$metr_res_comp_dis=="RCTs",
                                          paste0(form_ratio(point[,c("Nb_low","Nb_med","Nb_up")],
                                                            pourc=FALSE)," ",input$metr_res_comp_dis),
                                          paste0(form_ratio(point[,c("Nb_low","Nb_med","Nb_up")]/1e3,
                                                            pourc=FALSE)," thousand patients")),                                  
                                   " (",form_ratio(point[,c("prop_low","prop_med","prop_up")],
                                                   pourc=TRUE),")<br/>")))
                    )
 
    #Hover info
    output$hover_info_dis2 <- renderUI({
        
        hover <- input$plot_hover_dis2
        
        point <- nearPoints(ddis_comp_points[ddis_comp_points$Dis_tooltip==input$disease2,],
        hover, yvar="prop_pos", xvar="Reg_pos",
                            threshold = (1005*0.2/(length(regs_ord_comp) + 0.4)), maxpoints = 1, addDist = TRUE)
        if (nrow(point) == 0) return(NULL)

            # create style property fot tooltip
            # background color is set so tooltip is a bit transparent
            # z-index is set so we are sure are tooltip will be on top
            style <- paste0("position:relative; z-index:100; background-color: rgba(245, 245, 245, 0.95); ",
                            "left:", 0, "px; top:", 0, "px;")

            tags$div(class = "well well-sm",
                     style = style,
                     p(HTML(paste0("<b> Group of diseases: </b>", input$disease2, "<br/>",
                                   "<b> Region: </b>", point$Region, "<br/>",
                                   "<b> Burden: </b>", format(round(point$Nb/1e6,1),nsmall = 1,big.mark=","),
                                   " million ", input$metr_burden_comp_dis,"s (",
                                   format(round(point$prop),nsmall = 0),"%)<br/>",
                                   "<b> Research: </b>", 
                                   ifelse(input$metr_res_comp_dis=="RCTs",
                                          paste0(form_ratio(point[,c("Nb_low","Nb_med","Nb_up")],
                                                            pourc=FALSE)," ",input$metr_res_comp_dis),
                                          paste0(form_ratio(point[,c("Nb_low","Nb_med","Nb_up")]/1e3,
                                                            pourc=FALSE)," thousand patients")),                                  
                                   " (",form_ratio(point[,c("prop_low","prop_med","prop_up")],
                                                   pourc=TRUE),")<br/>")))
                    )


        
    #Plot
    plotInput_comp_dis <- 

            dt <- ddis_comp_plot
            max_plot <- 10*ceiling(max(c(dt$prop,ddis_comp_err$prop_up)/10,na.rm=TRUE))

            #Highlighting gaps
#            dt$gap <- factor(paste(dt$Region,dt$Disease))
#            levels(dt$gap) <- unlist(lapply(sort(paste(dt$Region,dt$Disease)),
#                                            function(x){
#                                            ifelse(sum(paste(dcomp_err$Region,dcomp_err$Disease)==x)==0,NA,
#                                            dt$prop[dt$metr=="burden" & paste(dt$Region,dt$Disease)==x]/
#                                            dcomp_err$prop_up[paste(dcomp_err$Region,dcomp_err$Disease)==x])}))
#            dt$gap_col <- dt$metr
#            dt$gap_col[as.numeric(as.character(dt$gap))>=2 & dt$gap_col=="burden"] <- "burden_gap"
        
        #disease labels
        dlbl <- dt[order(dt$Region),]
        dlbl <- dlbl[dlbl$metr=="burden",]
#        dlbl$gap_text <- "plain"
#        dlbl$gap_text[dlbl$gap_col=="burden_gap"] <- "bold"

        p <- ggplot(dt[dt$Dis_tooltip==input$disease1,],aes(Region))
#        p <- p + geom_bar(aes(fill=gap_col,y=prop),position="dodge",stat="identity",width=0.8)
        p <- p + geom_bar(aes(fill=metr,y=prop),position="dodge",stat="identity",width=0.8)
        p <- p + geom_errorbar(aes(x=as.numeric(Region)+0.2,ymax=prop_up,ymin=prop_low),width=0.2,
                               data=ddis_comp_err[ddis_comp_err$Dis_tooltip==input$disease1,])
#        if(input$hgp_dis)  { p <- p + scale_fill_manual(values = c("burden"="orange","burden_gap"="red",
#                                                                   "research"="blue")) }
#        if(!input$hgp_dis) { p <- p + scale_fill_manual(values = c("burden"="orange","burden_gap"="orange",
#                                                                   "research"="blue")) }        
        
        if(max_plot>20) {
            p <- p + scale_y_continuous(limits = c(0,max_plot),breaks=c(0,5,seq(10,max_plot,10)),
                                        name="%")
        }
        if(max_plot<=20) {
            p <- p + scale_y_continuous(limits = c(0,max_plot),breaks=c(0,1,seq(5,max_plot,5)),
                                        name="%")
        }
        p <- p + theme(axis.text.y=element_text(size=12))
        p <- p + theme(axis.title.y=element_text(size=20)) 

        p <- p + theme(axis.text.x = element_blank()) + 
                 theme(panel.background = element_blank()) + 
                 theme(panel.grid.major.y = element_line(colour = "grey",size=0.1)) +
                 theme(panel.grid.major.x = element_blank()) + 
                 theme(axis.ticks.x=element_blank()) + 
                 theme(legend.position = "none") + 
                 theme(axis.title.x=element_blank())+
                 labs(x=NULL)
        
        p1 <- p
                         
        plb <- ggplot(dt,aes(Region)) 
        plb <- plb + scale_y_continuous(limits = c(0,0),breaks=c(0),label="   ",
                                        name=" ")
        plb <- plb + theme(axis.ticks.y = element_blank())
        plb <- plb + theme(axis.text.y=element_text(size=12))
        plb <- plb + theme(axis.title.y=element_text(size=20)) 

#        if(input$hgp_dis)  { plb <- plb + theme(axis.text.x = element_text(face=dlbl$gap_text)) }
        plb <- plb + theme(axis.text.x = element_text(angle=55,
                                                      hjust=1,
                                                      vjust=1.1,size=10))
        plb <- plb + theme(panel.background = element_blank()) + 
                     theme(panel.grid.major.y = element_blank()) +
                     theme(panel.grid.major.x = element_blank()) + 
                     theme(axis.ticks.x=element_blank()) + 
                     theme(legend.position = "none") + 
                     theme(axis.title.x=element_blank())

        plb <- plb + scale_x_discrete(label = dlbl$regs_lab)
        plb <- plb + theme(axis.text.x=element_text(size=12))

        p <- ggplot(dt[dt$Dis_tooltip==input$disease2,],aes(Region))
#        p <- p + geom_bar(aes(fill=gap_col,y=prop),position="dodge",stat="identity",width=0.8)
        p <- p + geom_bar(aes(fill=metr,y=prop),position="dodge",stat="identity",width=0.8)
        p <- p + geom_errorbar(aes(x=as.numeric(Region)+0.2,ymax=prop_up,ymin=prop_low),width=0.2,
                               data=ddis_comp_err[ddis_comp_err$Dis_tooltip==input$disease2,])
#        if(input$hgp_dis)  { p <- p + scale_fill_manual(values = c("burden"="orange","burden_gap"="red",
#                                                                   "research"="blue")) }
#        if(!input$hgp_dis) { p <- p + scale_fill_manual(values = c("burden"="orange","burden_gap"="orange",
#                                                                   "research"="blue")) }        
        
        if(max_plot>20) {
            p <- p + scale_y_continuous(limits = c(0,max_plot),breaks=c(0,5,seq(10,max_plot,10)),
                                        name="%")
        }
        if(max_plot<=20) {
            p <- p + scale_y_continuous(limits = c(0,max_plot),breaks=c(0,1,seq(5,max_plot,5)),
                                        name="%")
        }
        p <- p + theme(axis.text.y=element_text(size=12))
        p <- p + theme(axis.title.y=element_text(size=20)) 

        p <- p + theme(axis.text.x = element_blank()) + 
                 theme(panel.background = element_blank()) + 
                 theme(panel.grid.major.y = element_line(colour = "grey",size=0.1)) +
                 theme(panel.grid.major.x = element_blank()) + 
                 theme(axis.ticks.x=element_blank()) + 
                 theme(legend.position = "none") + 
                 theme(axis.title.x=element_blank())+
                 labs(x=NULL)
        
        p2 <- p
        
plotInput_comp_dis <-         list(p1,p2,plb)
        
            


    #Render Plot
    output$plot_comp_dis1 <- renderPlot({ plotInput_comp_dis()[[1]] })    
    output$plot_comp_dis2 <- renderPlot({ plotInput_comp_dis()[[2]] })
    output$plot_comp_dis_labs <- renderPlot({ plotInput_comp_dis()[[3]] })
        
    output$downloadPlot_comp_dis <- downloadHandler(
            filename = function() { paste0(input$tabs,'_',
                                           gsub('[[:punct:]| ]','_',input$disease1),'_vs_',
                                           gsub('[[:punct:]| ]','_',input$disease2),'_vs_',
                                           input$metr_burden_comp_dis,'_vs_',input$metr_res_comp_dis,
                                           '.png', sep='') },
            content = function(file) { 
                P <-  plotInput_comp_dis()
                ggsave(file, plot = grid.arrange(P[[1]], P[[3]], P[[2]],
                                                 layout_matrix = matrix(c(1,1,1,2,3,3,3),ncol=1),
                                                 top = textGrob(paste0("Shares across regions of ",
                                                                      input$metr_burden_comp_dis,"s as of 2005 vs\n",
                                                                      ifelse(input$metr_res_comp_dis=="RCTs",
                                                                             "Randomized controlled trials",
                                                                             "patients planned to be enrolled in RCTs"),
                                                                      " conducted in 2006-2015\non ",
                                                                       input$disease1,
                                                                       " (top) & ", input$disease2,
                                                                       " (bottom)"),
                                                                       gp=gpar(fontsize=20))),
                device = "png", width = 15, height = 12, unit = "in") }
        )
                                                                                       
    output$title_comp_dis <- renderText({
       
        paste0( "<center><b>",
               "Shares across regions of ",
               input$metr_burden_comp_dis,"s as of 2005 vs<br/>",
               ifelse(input$metr_res_comp_dis=="RCTs",
                      "Randomized controlled trials",
                      "patients planned to be enrolled in RCTs"),
               " conducted in 2006-2015<br/>on ",
               input$disease1,
               " (top) & ", input$disease2,
               " (bottom)",
               "</b></center>"
              )
        })    


